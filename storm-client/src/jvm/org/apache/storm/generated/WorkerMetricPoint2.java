/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)")
public class WorkerMetricPoint2 implements org.apache.storm.thrift.TBase<WorkerMetricPoint2, WorkerMetricPoint2._Fields>, java.io.Serializable, Cloneable, Comparable<WorkerMetricPoint2> {
  private static final org.apache.storm.thrift.protocol.TStruct STRUCT_DESC = new org.apache.storm.thrift.protocol.TStruct("WorkerMetricPoint2");

  private static final org.apache.storm.thrift.protocol.TField METRIC_NAME_FIELD_DESC = new org.apache.storm.thrift.protocol.TField("metricName", org.apache.storm.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.storm.thrift.protocol.TField METRIC_VALUE_FIELD_DESC = new org.apache.storm.thrift.protocol.TField("metricValue", org.apache.storm.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.storm.thrift.protocol.TField TIMESTAMP_MS_FIELD_DESC = new org.apache.storm.thrift.protocol.TField("timestampMs", org.apache.storm.thrift.protocol.TType.I64, (short)3);

  private static final org.apache.storm.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WorkerMetricPoint2StandardSchemeFactory();
  private static final org.apache.storm.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WorkerMetricPoint2TupleSchemeFactory();

  private @org.apache.storm.thrift.annotation.Nullable java.lang.String metricName; // required
  private double metricValue; // required
  private long timestampMs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.storm.thrift.TFieldIdEnum {
    METRIC_NAME((short)1, "metricName"),
    METRIC_VALUE((short)2, "metricValue"),
    TIMESTAMP_MS((short)3, "timestampMs");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.storm.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // METRIC_NAME
          return METRIC_NAME;
        case 2: // METRIC_VALUE
          return METRIC_VALUE;
        case 3: // TIMESTAMP_MS
          return TIMESTAMP_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.storm.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __METRICVALUE_ISSET_ID = 0;
  private static final int __TIMESTAMPMS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.storm.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.storm.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.storm.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.METRIC_NAME, new org.apache.storm.thrift.meta_data.FieldMetaData("metricName", org.apache.storm.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.storm.thrift.meta_data.FieldValueMetaData(org.apache.storm.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METRIC_VALUE, new org.apache.storm.thrift.meta_data.FieldMetaData("metricValue", org.apache.storm.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.storm.thrift.meta_data.FieldValueMetaData(org.apache.storm.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TIMESTAMP_MS, new org.apache.storm.thrift.meta_data.FieldMetaData("timestampMs", org.apache.storm.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.storm.thrift.meta_data.FieldValueMetaData(org.apache.storm.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.storm.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WorkerMetricPoint2.class, metaDataMap);
  }

  public WorkerMetricPoint2() {
  }

  public WorkerMetricPoint2(
    java.lang.String metricName,
    double metricValue,
    long timestampMs)
  {
    this();
    this.metricName = metricName;
    this.metricValue = metricValue;
    set_metricValue_isSet(true);
    this.timestampMs = timestampMs;
    set_timestampMs_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WorkerMetricPoint2(WorkerMetricPoint2 other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_metricName()) {
      this.metricName = other.metricName;
    }
    this.metricValue = other.metricValue;
    this.timestampMs = other.timestampMs;
  }

  public WorkerMetricPoint2 deepCopy() {
    return new WorkerMetricPoint2(this);
  }

  @Override
  public void clear() {
    this.metricName = null;
    set_metricValue_isSet(false);
    this.metricValue = 0.0;
    set_timestampMs_isSet(false);
    this.timestampMs = 0;
  }

  @org.apache.storm.thrift.annotation.Nullable
  public java.lang.String get_metricName() {
    return this.metricName;
  }

  public void set_metricName(@org.apache.storm.thrift.annotation.Nullable java.lang.String metricName) {
    this.metricName = metricName;
  }

  public void unset_metricName() {
    this.metricName = null;
  }

  /** Returns true if field metricName is set (has been assigned a value) and false otherwise */
  public boolean is_set_metricName() {
    return this.metricName != null;
  }

  public void set_metricName_isSet(boolean value) {
    if (!value) {
      this.metricName = null;
    }
  }

  public double get_metricValue() {
    return this.metricValue;
  }

  public void set_metricValue(double metricValue) {
    this.metricValue = metricValue;
    set_metricValue_isSet(true);
  }

  public void unset_metricValue() {
    __isset_bitfield = org.apache.storm.thrift.EncodingUtils.clearBit(__isset_bitfield, __METRICVALUE_ISSET_ID);
  }

  /** Returns true if field metricValue is set (has been assigned a value) and false otherwise */
  public boolean is_set_metricValue() {
    return org.apache.storm.thrift.EncodingUtils.testBit(__isset_bitfield, __METRICVALUE_ISSET_ID);
  }

  public void set_metricValue_isSet(boolean value) {
    __isset_bitfield = org.apache.storm.thrift.EncodingUtils.setBit(__isset_bitfield, __METRICVALUE_ISSET_ID, value);
  }

  public long get_timestampMs() {
    return this.timestampMs;
  }

  public void set_timestampMs(long timestampMs) {
    this.timestampMs = timestampMs;
    set_timestampMs_isSet(true);
  }

  public void unset_timestampMs() {
    __isset_bitfield = org.apache.storm.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field timestampMs is set (has been assigned a value) and false otherwise */
  public boolean is_set_timestampMs() {
    return org.apache.storm.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMPMS_ISSET_ID);
  }

  public void set_timestampMs_isSet(boolean value) {
    __isset_bitfield = org.apache.storm.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMPMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.storm.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case METRIC_NAME:
      if (value == null) {
        unset_metricName();
      } else {
        set_metricName((java.lang.String)value);
      }
      break;

    case METRIC_VALUE:
      if (value == null) {
        unset_metricValue();
      } else {
        set_metricValue((java.lang.Double)value);
      }
      break;

    case TIMESTAMP_MS:
      if (value == null) {
        unset_timestampMs();
      } else {
        set_timestampMs((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.storm.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case METRIC_NAME:
      return get_metricName();

    case METRIC_VALUE:
      return get_metricValue();

    case TIMESTAMP_MS:
      return get_timestampMs();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case METRIC_NAME:
      return is_set_metricName();
    case METRIC_VALUE:
      return is_set_metricValue();
    case TIMESTAMP_MS:
      return is_set_timestampMs();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof WorkerMetricPoint2)
      return this.equals((WorkerMetricPoint2)that);
    return false;
  }

  public boolean equals(WorkerMetricPoint2 that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_metricName = true && this.is_set_metricName();
    boolean that_present_metricName = true && that.is_set_metricName();
    if (this_present_metricName || that_present_metricName) {
      if (!(this_present_metricName && that_present_metricName))
        return false;
      if (!this.metricName.equals(that.metricName))
        return false;
    }

    boolean this_present_metricValue = true;
    boolean that_present_metricValue = true;
    if (this_present_metricValue || that_present_metricValue) {
      if (!(this_present_metricValue && that_present_metricValue))
        return false;
      if (this.metricValue != that.metricValue)
        return false;
    }

    boolean this_present_timestampMs = true;
    boolean that_present_timestampMs = true;
    if (this_present_timestampMs || that_present_timestampMs) {
      if (!(this_present_timestampMs && that_present_timestampMs))
        return false;
      if (this.timestampMs != that.timestampMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((is_set_metricName()) ? 131071 : 524287);
    if (is_set_metricName())
      hashCode = hashCode * 8191 + metricName.hashCode();

    hashCode = hashCode * 8191 + org.apache.storm.thrift.TBaseHelper.hashCode(metricValue);

    hashCode = hashCode * 8191 + org.apache.storm.thrift.TBaseHelper.hashCode(timestampMs);

    return hashCode;
  }

  @Override
  public int compareTo(WorkerMetricPoint2 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(is_set_metricName()).compareTo(other.is_set_metricName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_metricName()) {
      lastComparison = org.apache.storm.thrift.TBaseHelper.compareTo(this.metricName, other.metricName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_metricValue()).compareTo(other.is_set_metricValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_metricValue()) {
      lastComparison = org.apache.storm.thrift.TBaseHelper.compareTo(this.metricValue, other.metricValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_timestampMs()).compareTo(other.is_set_timestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_timestampMs()) {
      lastComparison = org.apache.storm.thrift.TBaseHelper.compareTo(this.timestampMs, other.timestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.storm.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.storm.thrift.protocol.TProtocol iprot) throws org.apache.storm.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.storm.thrift.protocol.TProtocol oprot) throws org.apache.storm.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("WorkerMetricPoint2(");
    boolean first = true;

    sb.append("metricName:");
    if (this.metricName == null) {
      sb.append("null");
    } else {
      sb.append(this.metricName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metricValue:");
    sb.append(this.metricValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestampMs:");
    sb.append(this.timestampMs);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.storm.thrift.TException {
    // check for required fields
    if (!is_set_metricName()) {
      throw new org.apache.storm.thrift.protocol.TProtocolException("Required field 'metricName' is unset! Struct:" + toString());
    }

    if (!is_set_metricValue()) {
      throw new org.apache.storm.thrift.protocol.TProtocolException("Required field 'metricValue' is unset! Struct:" + toString());
    }

    if (!is_set_timestampMs()) {
      throw new org.apache.storm.thrift.protocol.TProtocolException("Required field 'timestampMs' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.storm.thrift.protocol.TCompactProtocol(new org.apache.storm.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.storm.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.storm.thrift.protocol.TCompactProtocol(new org.apache.storm.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.storm.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WorkerMetricPoint2StandardSchemeFactory implements org.apache.storm.thrift.scheme.SchemeFactory {
    public WorkerMetricPoint2StandardScheme getScheme() {
      return new WorkerMetricPoint2StandardScheme();
    }
  }

  private static class WorkerMetricPoint2StandardScheme extends org.apache.storm.thrift.scheme.StandardScheme<WorkerMetricPoint2> {

    public void read(org.apache.storm.thrift.protocol.TProtocol iprot, WorkerMetricPoint2 struct) throws org.apache.storm.thrift.TException {
      org.apache.storm.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.storm.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // METRIC_NAME
            if (schemeField.type == org.apache.storm.thrift.protocol.TType.STRING) {
              struct.metricName = iprot.readString();
              struct.set_metricName_isSet(true);
            } else { 
              org.apache.storm.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // METRIC_VALUE
            if (schemeField.type == org.apache.storm.thrift.protocol.TType.DOUBLE) {
              struct.metricValue = iprot.readDouble();
              struct.set_metricValue_isSet(true);
            } else { 
              org.apache.storm.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIMESTAMP_MS
            if (schemeField.type == org.apache.storm.thrift.protocol.TType.I64) {
              struct.timestampMs = iprot.readI64();
              struct.set_timestampMs_isSet(true);
            } else { 
              org.apache.storm.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.storm.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.storm.thrift.protocol.TProtocol oprot, WorkerMetricPoint2 struct) throws org.apache.storm.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.metricName != null) {
        oprot.writeFieldBegin(METRIC_NAME_FIELD_DESC);
        oprot.writeString(struct.metricName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(METRIC_VALUE_FIELD_DESC);
      oprot.writeDouble(struct.metricValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMESTAMP_MS_FIELD_DESC);
      oprot.writeI64(struct.timestampMs);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WorkerMetricPoint2TupleSchemeFactory implements org.apache.storm.thrift.scheme.SchemeFactory {
    public WorkerMetricPoint2TupleScheme getScheme() {
      return new WorkerMetricPoint2TupleScheme();
    }
  }

  private static class WorkerMetricPoint2TupleScheme extends org.apache.storm.thrift.scheme.TupleScheme<WorkerMetricPoint2> {

    @Override
    public void write(org.apache.storm.thrift.protocol.TProtocol prot, WorkerMetricPoint2 struct) throws org.apache.storm.thrift.TException {
      org.apache.storm.thrift.protocol.TTupleProtocol oprot = (org.apache.storm.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.metricName);
      oprot.writeDouble(struct.metricValue);
      oprot.writeI64(struct.timestampMs);
    }

    @Override
    public void read(org.apache.storm.thrift.protocol.TProtocol prot, WorkerMetricPoint2 struct) throws org.apache.storm.thrift.TException {
      org.apache.storm.thrift.protocol.TTupleProtocol iprot = (org.apache.storm.thrift.protocol.TTupleProtocol) prot;
      struct.metricName = iprot.readString();
      struct.set_metricName_isSet(true);
      struct.metricValue = iprot.readDouble();
      struct.set_metricValue_isSet(true);
      struct.timestampMs = iprot.readI64();
      struct.set_timestampMs_isSet(true);
    }
  }

  private static <S extends org.apache.storm.thrift.scheme.IScheme> S scheme(org.apache.storm.thrift.protocol.TProtocol proto) {
    return (org.apache.storm.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

